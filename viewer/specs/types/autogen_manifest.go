// Code generated by xsdgen. DO NOT EDIT.

package specs

import "encoding/xml"

// The AggregationLevel complexType is the container for the information about the
// functional granularity of this learning object.
type AggregationLevelType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *AggregationLevelType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AggregationLevelType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The Annotation complexType is the container for comments on the educational use of this learning object,
// and information on when and by whom the comments were created.  This category enables educators to share their
// assessements of learning objects suggestions for use, etc.
type AnnotationType struct {
	Items       []string       `xml:",any"`
	Entity      string         `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest entity,omitempty"`
	Date        DateTimeType   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest date,omitempty"`
	Description LangStringType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest description,omitempty"`
}

// The Classification complexType is the container for information which describes where this learning
// object falls within a particular classification system.  To define multiple classifications, there may be
// multiple instances of this category.
type ClassificationType struct {
	Items       []string         `xml:",any"`
	Purpose     PurposeType      `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest purpose,omitempty"`
	TaxonPath   []TaxonPathType  `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest taxonPath,omitempty"`
	Description LangStringType   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest description,omitempty"`
	Keyword     []LangStringType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest keyword,omitempty"`
}

// The Context complexType is the container for the information about the principal environment within which the
// learning and use of this learning object is intended to take place.  Suggested good practice is to use one of the
// values of the value space and to use an additional instance of this data element for further refinement.
type ContextType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *ContextType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ContextType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The Contribute complexType is the container for the entities (i.e. people, organizations) that have
// contributed to the state of the learning object.
type ContributeLifeCycleType struct {
	Items  []string          `xml:",any"`
	Role   RoleLifeCycleType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest role,omitempty"`
	Entity []string          `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest entity,omitempty"`
	Date   DateTimeType      `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest date,omitempty"`
}

// The ContributeMetametadata complexType is the container for the information about those entities that have affected the
// state of this metadata instance during its lifecycle e.g. creation, validation.  This information is about contributions to the metadata.
type ContributeMetaMetadataType struct {
	Items  []string             `xml:",any"`
	Role   RoleMetaMetadataType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest role,omitempty"`
	Entity []string             `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest entity,omitempty"`
	Date   DateTimeType         `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest date,omitempty"`
}

// The CopyrightAndOtherRestrictions complexType defines whether copyright or other restrictions apply
// to the use of this learning object.
type CopyrightAndOtherRestrictionsType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *CopyrightAndOtherRestrictionsType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CopyrightAndOtherRestrictionsType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The Cost complexType is the container for whether use of this learning object requires payment.
type CostType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *CostType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CostType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The DateTime abstract complexType is the container for the annotated date/time.  An accuracy
// of at least one second is supported.  The ISO 8601 format is used.  An associated description is also provided.
type DateTimeType struct {
	Items       []string       `xml:",any"`
	DateTime    string         `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest dateTime,omitempty"`
	Description LangStringType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest description,omitempty"`
}

// The Difficulty complexType is the container for the information about how hard it is to work with or through this
// learning object for the typical intended target audience.  The typical audience can be characterised by the data
// elements Educational.Context and Educational.TypicalAgeRange.
type DifficultyType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *DifficultyType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DifficultyType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The Duration abstract complexType is the container for an annotated duration.  The value space
// for the duration is defined as per ISO 8601:2000.
type DurationType struct {
	Items       []string       `xml:",any"`
	Duration    string         `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest duration,omitempty"`
	Description LangStringType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest description,omitempty"`
}

// The Educational complexType is the container for the information that describes the key educational or
// pedagogic characteristics of this learning object.  This is pedagogical informtion essential to those involved
// in achieving a quality learning experience.  The audience for this metadata includes teachers, managers,
// authors and learners.
type EducationalType struct {
	Items                []string                   `xml:",any"`
	InteractivityType    InteractivityTypeType      `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest interactivityType,omitempty"`
	LearningResourceType []LearningResourceTypeType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest learningResourceType,omitempty"`
	InteractivityLevel   InteractivityLevelType     `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest interactivityLevel,omitempty"`
	SemanticDensity      SemanticDensityType        `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest semanticDensity,omitempty"`
	IntendedEndUserRole  []IntendedEndUserRoleType  `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest intendedEndUserRole,omitempty"`
	Context              []ContextType              `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest context,omitempty"`
	TypicalAgeRange      []LangStringType           `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest typicalAgeRange,omitempty"`
	Difficulty           DifficultyType             `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest difficulty,omitempty"`
	TypicalLearningTime  DurationType               `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest typicalLearningTime,omitempty"`
	Description          LangStringType             `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest description,omitempty"`
	Language             []string                   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest language,omitempty"`
}

type GeneralType struct {
	Items            []string             `xml:",any"`
	Identifier       []IdentifierType     `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest identifier,omitempty"`
	Title            LangStringType       `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest title,omitempty"`
	Language         []string             `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest language,omitempty"`
	Description      []LangStringType     `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest description,omitempty"`
	Keyword          []LangStringType     `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest keyword,omitempty"`
	Coverage         []LangStringType     `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest coverage,omitempty"`
	Structure        StructureType        `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest structure,omitempty"`
	AggregationLevel AggregationLevelType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest aggregationLevel,omitempty"`
}

// The Identifier complexType is the container for the globally unique idenitifer that identifies
// the associated parent object.
type IdentifierType struct {
	Items   []string `xml:",any"`
	Catalog string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest catalog,omitempty"`
	Entry   string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest entry,omitempty"`
}

// The IntendedEndUserRole complexType is the container for the information about the principal user(s) for which this learning object
// was designed, most dominant first.  For Strict LOM binding this has an enumerated vocabulary.  The Classification element can be used
// to describe the role through the skills the user is intended to master, or the tasks he or she is intended to be able to accomplish.
type IntendedEndUserRoleType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *IntendedEndUserRoleType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T IntendedEndUserRoleType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The InteractivityLevel complexType is the container for information about the degree of interactivity of the learning
// object.  Interactiviy in this context refers to the degree to which the learner can influence the aspect or behaviour
// of the learning object.  Inherently, this scale is meaningful within the context of a community of practice.
type InteractivityLevelType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *InteractivityLevelType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T InteractivityLevelType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The InteractivityType complexType is the container for the information about the predominant mode of learning
// supported by this learning project.
type InteractivityTypeType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *InteractivityTypeType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T InteractivityTypeType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The Kind complexType is the container for the nature of the relationship between this learning object and the
// target learning object, identified by information in the associated Resource complexType.
type KindType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *KindType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T KindType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The LOM complexType is the container for the metadata instance.
type LOMType struct {
	Items          []string             `xml:",any"`
	General        GeneralType          `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest general,omitempty"`
	LifeCycle      LifeCycleType        `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest lifeCycle,omitempty"`
	MetaMetadata   MetaMetadataType     `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest metaMetadata,omitempty"`
	Technical      TechnicalType        `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest technical,omitempty"`
	Educational    []EducationalType    `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest educational,omitempty"`
	Rights         RightsType           `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest rights,omitempty"`
	Relation       []RelationType       `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest relation,omitempty"`
	Annotation     []AnnotationType     `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest annotation,omitempty"`
	Classification []ClassificationType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest classification,omitempty"`
}

// The LangString complexType is the container for a group of language specific characterstrings.
type LangStringType struct {
	String []LanguageStringType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest string,omitempty"`
}

type LanguageStringType struct {
	Value    string `xml:",chardata"`
	Language string `xml:"language,attr,omitempty"`
}

// The LearningResourceType complexType is the container for the information about the specific kind of learning object.
// The most dominant kind shall be first.  The vocabulary terms are defined as in OED:1989 and as used by any educational
// communties of practice.
type LearningResourceTypeType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *LearningResourceTypeType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LearningResourceTypeType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The LifeCycle complexType is the container for the history and current state of this
// learning object and those entities that have affected this learning object during its evolution.
type LifeCycleType struct {
	Items      []string                  `xml:",any"`
	Version    LangStringType            `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest version,omitempty"`
	Status     StatusType                `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest status,omitempty"`
	Contribute []ContributeLifeCycleType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest contribute,omitempty"`
}

// The MetaMetadata complexType is the container for the information that describes this metadata record
// itself (raher than the learning object that this record describes).  This category describes how the metadata
// instance can be identified, who created this metadata instance, and how, when, and with what references.
type MetaMetadataType struct {
	Items          []string                     `xml:",any"`
	Identifier     []IdentifierType             `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest identifier,omitempty"`
	Contribute     []ContributeMetaMetadataType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest contribute,omitempty"`
	Metadataschema []string                     `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest metadataschema,omitempty"`
	Language       string                       `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest language,omitempty"`
}

func (t *MetaMetadataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T MetaMetadataType
	var overlay struct {
		*T
		Metadataschema *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest metadataschema,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Metadataschema = (*string)(&overlay.T.Metadataschema)
	return d.DecodeElement(&overlay, &start)
}

// The Name complexType is the container for the name of the required technology to use this
// learning object.  The value for this element may be derived from the 'technical.format' automatically
// e.g. 'video/mpeg' implies 'multi-os'.  Also, this vocabulary includes most values in common use at the
// time the LOM Standard was created.
type NameType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *NameType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NameType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The OrComposite complexType is the container for grouping multiple requirements.  The composite requirement
// is satisfied when one of the component requirements is satisfied i.e. the logical connector is 'OR'.
type OrCompositeType struct {
	Items          []string `xml:",any"`
	Type           TypeType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest type,omitempty"`
	Name           NameType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest name,omitempty"`
	MinimumVersion string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest minimumVersion,omitempty"`
	MaximumVersion string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest maximumVersion,omitempty"`
}

// The Purpose complexType is the container for the information on the purpose of
// classifying this learning obect.
type PurposeType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *PurposeType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PurposeType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The Relation complexType is the container for the information that defines the relationship between this
// learning object and other learning objects, if any.  To define multiple relationships, there may be multiple
// instances of this category.  If there is more than one target learning object the each object shall have a new
// relationship instance.
type RelationType struct {
	Items    []string     `xml:",any"`
	Kind     KindType     `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest kind,omitempty"`
	Resource ResourceType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest resource,omitempty"`
}

// The Requirement complexType is the container for the information about the technical capabilities necessary for
// using this learning object.  If there are multiple requirements, then all are required i.e. the logical connector is 'AND'.
type RequirementType struct {
	Items       []string          `xml:",any"`
	OrComposite []OrCompositeType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest orComposite,omitempty"`
}

// The Resource complexType is the container for the information about the target learning object that this relationship references.
type ResourceType struct {
	Items       []string         `xml:",any"`
	Identifier  []IdentifierType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest identifier,omitempty"`
	Description []LangStringType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest description,omitempty"`
}

// The Rights complexType describes the intellectual property rights and conditions of use for this learning object.
// NOTE: The intent is to reuse results of ongoing work in the Intellectual Property Rights and e-commerce
// communities.  This category currently provides the absolute minimum level of detail only.
type RightsType struct {
	Items                         []string                          `xml:",any"`
	Cost                          CostType                          `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest cost,omitempty"`
	CopyrightAndOtherRestrictions CopyrightAndOtherRestrictionsType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest copyrightAndOtherRestrictions,omitempty"`
	Description                   LangStringType                    `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest description,omitempty"`
}

// The Role complexType is the container for the kind of contribution.
type RoleLifeCycleType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *RoleLifeCycleType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RoleLifeCycleType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The RoleMetaMetadata complexType is the container for the information about the kind of contribution.
type RoleMetaMetadataType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *RoleMetaMetadataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RoleMetaMetadataType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The SemanticDensity complexType is the container for the information about the degree of conciseness of a learning object.
// The semantic density of a learning object may be estimated in terms of its size, or - in the case of self-timed resources
// such as audio or video - duration.  The semantic density of a learning object is independent of its difficulty.
type SemanticDensityType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *SemanticDensityType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SemanticDensityType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The Status complexType is the container for the completion status or the condition of this learning object.
type StatusType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *StatusType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T StatusType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The Structure complexType is the container about the underlying organizational structure of
// this learning object.
type StructureType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *StructureType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T StructureType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}

// The TaxonPath complexType is the container for the information about the taxonomic path in a
// specific classification system.  Each succeeding level is a refinement in the definition of the
// preceding level.  There may be different paths in the same or different classifications, which
// describe the same characteristic.
type TaxonPathType struct {
	Items  []string       `xml:",any"`
	Source LangStringType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Taxon  []TaxonType    `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest taxon,omitempty"`
}

// The Taxon complexType is the container for the information about a particular term within a
// taxonomy.  A taxon is a node that has a defined label or term.  A taxon may also have an alphanumeric
// designation or identifier for standardized reference.  Either or both the label and the entry may be used
// to designate a particular taxon.  An ordered list of taxons creates a taxonomic path i.e. 'taxononomic
// stairway': this is a path from a more general to more specific entry in a classification.
type TaxonType struct {
	Items []string       `xml:",any"`
	Id    string         `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest id,omitempty"`
	Entry LangStringType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest entry,omitempty"`
}

// The Technical complexType is the container for the information that describes the technical requirements and
// characteristics of this learning object.
type TechnicalType struct {
	Items                     []string          `xml:",any"`
	Format                    []string          `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest format,omitempty"`
	Size                      string            `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest size,omitempty"`
	Location                  []string          `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest location,omitempty"`
	Requirement               []RequirementType `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest requirement,omitempty"`
	InstallationRemarks       LangStringType    `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest installationRemarks,omitempty"`
	OtherPlatformRequirements LangStringType    `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest otherPlatformRequirements,omitempty"`
	Duration                  DurationType      `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest duration,omitempty"`
}

// The Type complexType is the container for the information about the technology required to use this
// learning object e.g. hardware, software, network, etc.
type TypeType struct {
	Items  []string `xml:",any"`
	Source string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	Value  string   `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest value,omitempty"`
}

func (t *TypeType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TypeType
	var overlay struct {
		*T
		Source *string `xml:"http://ltsc.ieee.org/xsd/imsccv1p3/LOM/manifest source,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Source = (*string)(&overlay.T.Source)
	return d.DecodeElement(&overlay, &start)
}
